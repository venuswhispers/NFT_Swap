/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../common';

export interface ERC20ProxyInterface extends utils.Interface {
  functions: {
    'addAuthorizedAddress(address)': FunctionFragment;
    'authorities(uint256)': FunctionFragment;
    'removeAuthorizedAddress(address)': FunctionFragment;
    'owner()': FunctionFragment;
    'removeAuthorizedAddressAtIndex(address,uint256)': FunctionFragment;
    'getProxyId()': FunctionFragment;
    'authorized(address)': FunctionFragment;
    'getAuthorizedAddresses()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'addAuthorizedAddress'
      | 'authorities'
      | 'removeAuthorizedAddress'
      | 'owner'
      | 'removeAuthorizedAddressAtIndex'
      | 'getProxyId'
      | 'authorized'
      | 'getAuthorizedAddresses'
      | 'transferOwnership'
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'addAuthorizedAddress',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'authorities',
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'removeAuthorizedAddress',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'removeAuthorizedAddressAtIndex',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getProxyId',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'authorized',
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: 'getAuthorizedAddresses',
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: 'addAuthorizedAddress',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'authorities',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'removeAuthorizedAddress',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'removeAuthorizedAddressAtIndex',
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: 'getProxyId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'authorized', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getAuthorizedAddresses',
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike
  ): Result;

  events: {
    'AuthorizedAddressAdded(address,address)': EventFragment;
    'AuthorizedAddressRemoved(address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AuthorizedAddressAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AuthorizedAddressRemoved'): EventFragment;
}

export interface AuthorizedAddressAddedEventObject {
  target: string;
  caller: string;
}
export type AuthorizedAddressAddedEvent = TypedEvent<
  [string, string],
  AuthorizedAddressAddedEventObject
>;

export type AuthorizedAddressAddedEventFilter =
  TypedEventFilter<AuthorizedAddressAddedEvent>;

export interface AuthorizedAddressRemovedEventObject {
  target: string;
  caller: string;
}
export type AuthorizedAddressRemovedEvent = TypedEvent<
  [string, string],
  AuthorizedAddressRemovedEventObject
>;

export type AuthorizedAddressRemovedEventFilter =
  TypedEventFilter<AuthorizedAddressRemovedEvent>;

export interface ERC20Proxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ERC20ProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAuthorizedAddress(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    authorities(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    removeAuthorizedAddress(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeAuthorizedAddressAtIndex(
      target: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getProxyId(overrides?: CallOverrides): Promise<[string]>;

    authorized(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getAuthorizedAddresses(overrides?: CallOverrides): Promise<[string[]]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addAuthorizedAddress(
    target: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  authorities(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  removeAuthorizedAddress(
    target: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeAuthorizedAddressAtIndex(
    target: PromiseOrValue<string>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getProxyId(overrides?: CallOverrides): Promise<string>;

  authorized(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getAuthorizedAddresses(overrides?: CallOverrides): Promise<string[]>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAuthorizedAddress(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    authorities(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    removeAuthorizedAddress(
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeAuthorizedAddressAtIndex(
      target: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getProxyId(overrides?: CallOverrides): Promise<string>;

    authorized(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAuthorizedAddresses(overrides?: CallOverrides): Promise<string[]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    'AuthorizedAddressAdded(address,address)'(
      target?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null
    ): AuthorizedAddressAddedEventFilter;
    AuthorizedAddressAdded(
      target?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null
    ): AuthorizedAddressAddedEventFilter;

    'AuthorizedAddressRemoved(address,address)'(
      target?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null
    ): AuthorizedAddressRemovedEventFilter;
    AuthorizedAddressRemoved(
      target?: PromiseOrValue<string> | null,
      caller?: PromiseOrValue<string> | null
    ): AuthorizedAddressRemovedEventFilter;
  };

  estimateGas: {
    addAuthorizedAddress(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    authorities(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeAuthorizedAddress(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeAuthorizedAddressAtIndex(
      target: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getProxyId(overrides?: CallOverrides): Promise<BigNumber>;

    authorized(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAuthorizedAddresses(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAuthorizedAddress(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    authorities(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeAuthorizedAddress(
      target: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAuthorizedAddressAtIndex(
      target: PromiseOrValue<string>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getProxyId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    authorized(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAuthorizedAddresses(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
